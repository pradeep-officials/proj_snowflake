alter user PRADEEP set default_role = 'SYSADMIN';
alter user PRADEEP set default_warehouse = 'COMPUTE_WH';
alter user PRADEEP set default_namespace = 'UTIL_DB.PUBLIC';

---------------
use role accountadmin;
create or replace api integration dora_api_integration api_provider = aws_api_gateway api_aws_role_arn = 'arn:aws:iam::321463406630:role/snowflakeLearnerAssumedRole' enabled = true api_allowed_prefixes = ('https://awy6hshxy4.execute-api.us-west-2.amazonaws.com/dev/edu_dora')

show integrations;
-------------------


--CREATE GRADER FUNCTION

use role accountadmin;

create or replace external function util_db.public.grader(        
 step varchar     
 , passed boolean     
 , actual integer     
 , expected integer    
 , description varchar) 
 returns variant 
 api_integration = dora_api_integration 
 context_headers = (current_timestamp, current_account, current_statement, current_account_name) 
 as 'https://awy6hshxy4.execute-api.us-west-2.amazonaws.com/dev/edu_dora/grader'  
;  
        
------------
--CALL FUNCTION
use role accountadmin;

select util_db.public.grader(step, (actual = expected), actual, expected, description) as graded_results from
(SELECT 
 'DORA_IS_WORKING' as step
 ,(select 123 ) as actual
 ,123 as expected
 ,'Dora is working!' as description); 

----------
ALTER USER pradeep SET DEFAULT_ROLE = 'SYSADMIN';
create database AGS_GAME_AUDIENCE;
use database AGS_GAME_AUDIENCE;
drop schema AGS_GAME_AUDIENCE.public;
drop schema AGS_GAME_AUDIENCE.AGS_GAME_AUDIENCERAW;
create schema AGS_GAME_AUDIENCE.RAW;

drop table AGS_GAME_AUDIENCE.RAW.GAME_LOGS;

show grants to role ACCOUNTADMIN ;
create storage integration st_int_s3
    type = external_stage
    storage_provider = s3
    storage_aws_role_arn = 'arn:aws:iam::905418410478:role/S3AdminRole'
    enabled = true
    storage_allowed_locations = ( 's3://stg-pradeep' )
    -- storage_blocked_locations = ( 's3://<location1>', 's3://<location2>' )
    -- comment = '<comment>';
SHow INTEGRATIONS;
DESC INTEGRATION st_int_s3;
AGS_GAME_AUDIENCE.RAW.FF_JSON_LOGS
desc stage stg_pradeep;

--viewing the data in stage
select $1 from
@stg_pradeep
(file_format=>AGS_GAME_AUDIENCE.RAW.FF_JSON_LOGS)

--load into table
copy into AGS_GAME_AUDIENCE.RAW.GAME_LOGS
from @stg_pradeep
file_format=(format_name=AGS_GAME_AUDIENCE.RAW.FF_JSON_LOGS)

--select from table
select count(*) from AGS_GAME_AUDIENCE.RAW.GAME_LOGS

---selecting records after parsing JSON

select RAW_LOG:agent::text as AGENT,
        RAW_LOG:user_event::text as USER_EVENT,
        *
        from GAME_LOGS;

---Creating View
drop view LOGS;
create view LOGS as 
select RAW_LOG:agent::text as AGENT,
        RAW_LOG:datetime_iso8601::TIMESTAMP_NTZ as datetime_iso8601,
        RAW_LOG:game_subscription_type::text as game_subscription_type,
        RAW_LOG:user_event::text as USER_EVENT,
        RAW_LOG:user_login::text as user_login,
        *
        from GAME_LOGS;

--selecting from View

select * from LOGS
--------------------------

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
 'DNGW01' as step
  ,(
      select count(*)  
      from ags_game_audience.raw.logs
      where is_timestamp_ntz(to_variant(datetime_iso8601))= TRUE 
   ) as actual
, 10000 as expected
, 'Project DB and Log File Set Up Correctly' as description
); 


